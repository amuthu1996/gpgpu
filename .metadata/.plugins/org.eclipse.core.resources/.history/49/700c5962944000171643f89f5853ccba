#include<stdio.h>
#include<stdlib.h>
#include<cuda.h>
#include<math.h>

#define X 1000
#define Y 1000

_global_
void vecTranspose(int *A,unsigned int N){

	unsigned int idx = blockIdx.x * blockDim.x + threadIdx.x;

}

int main(){
	unsigned int N = 1000000;
	int *A_h,*A_d;

	A_h = (int *)malloc(N * sizeof(int));
	srand(time(NULL));
	//initaializing 0-99 to all index
	for(unsigned int i=0;i<N;i++){
		A_h[i] = (rand()%100);
	}

	// Allocate device memory
	cudaMalloc(&A_d, N*sizeof(int));

	//memory copy from host to device
	cudaMemcpy(A_d, A_h, N*sizeof(int), cudaMemcpyHostToDevice);

	dim3 dimBlock(32,32,1);
	dim3 dimGrid(ceil(X/32), ceil(X/32) , 1);
	vecTranspose<<< dimGrid, dimBlock >>>(A_d, N);

	cudaMemcpy(A_h, A_d, N*sizeof(int), cudaMemcpyDeviceToHost);
	printf("Computation is Over\n");
	return 0;
}
