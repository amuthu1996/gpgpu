#include<stdio.h>
#include<stdlib.h>
#include<cuda.h>
#include<math.h>

#define X 1000
#define Y 1000

__global__
void vecTranspose(int *A, int *T, unsigned int N){

	unsigned int row = blockIdx.x * blockDim.x + threadIdx.x;
	unsigned int col = blockIdx.y * blockDim.y + threadIdx.y;
	T[row*1000 + col] = A[col*1000 + row];
}

int main(){
	unsigned int N = 1000000;
	int *A_h, *A_d, *A_t;

	A_h = (int *)malloc(N * sizeof(int));
	srand(time(NULL));
	//initaializing 0-99 to all index
	for(unsigned int i=0;i<N;i++){
		A_h[i] = (rand()%100);
	}

	// Allocate device memory
	cudaMalloc(&A_d, N*sizeof(int));

	//memory copy from host to device
	cudaMemcpy(A_d, A_h, N*sizeof(int), cudaMemcpyHostToDevice);
	// Allocate device memory for transpose
	cudaMalloc(&A_t, N*sizeof(int));

	dim3 dimBlock(32,32,1);
	dim3 dimGrid(ceil(X/32), ceil(X/32) , 1);

	vecTranspose<<< dimGrid, dimBlock >>>(A_d, A_t, N);

	cudaMemcpy(A_h, A_t, N*sizeof(int), cudaMemcpyDeviceToHost);
	printf("Computation is Over\n");
	return 0;
}
